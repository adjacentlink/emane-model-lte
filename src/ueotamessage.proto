/*
 * Copyright (c) 2019 - Adjacent Link LLC, Bridgewater, New Jersey
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * * Neither the name of Adjacent Link LLC nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * See toplevel COPYING for more information.
 */

syntax = "proto2";

package EMANELTE.MHAL;

option optimize_for = SPEED;

import "otacommon.proto";

message UE_UL_Message
{
// ********** BEGIN MSG DEFS ***********
 message Transmitter 
  {
    // cell radio net temp id
    required uint32 crnti = 1;

    // Physical Cell Id
    required uint32  phy_cell_id = 2;

    // tx tti
    required uint32 tti = 3;
  }

 // random access channel
 message PRACH
 {
   message Preamble
    {
     required int32 index  = 1;
    }

   required Preamble preamble = 1;
 }

 // uplink control channel
 message PUCCH
 {
   message Grant
   {
     required uint32  rnti      = 1;
     required uint32  num_prb   = 2;
     required uint32  num_pucch = 3;
     required bytes   uci       = 4;
   }

   repeated Grant grant = 1;
 }

 // uplink shared channel
 message PUSCH
 {
   message Grant
   {
     required uint32 rnti     = 1;
     required bytes  ul_grant = 2;
     required bytes  uci      = 3;
     required bytes  payload  = 4;
   }

   repeated Grant grant = 1;
 }
// ********** END MSG DEFS ***********


 required Transmitter transmitter = 1;

 optional PRACH prach = 2;

 optional PUCCH pucch = 3;

 optional PUSCH pusch = 4;
}
